// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id          String               @id @default(uuid())
  name        String
  address     String
  city        String
  state       String?
  zipCode     String?
  latitude    Float?
  longitude   Float?
  stars       Float                @default(0.0)
  reviewCount Int                  @default(0)
  isOpen      Boolean?
  Reviews     Review[]
  Categories  CategoryToBusiness[]
  Photos      Photo[]
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  password     String
  email        String?   @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime  @default(now())
  reviewCount  Int       @default(0)
  commentCount Int       @default(0)
  stars        Float     @default(0.0)
  Reviews      Review[]
  Comments     Comment[]
}

model Review {
  id         String    @id @default(uuid())
  text       String
  stars      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  // commentCount Int       @default(0)
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  businessId String
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  Comments   Comment[]

  @@unique(name: "uniqueReview", [authorId, businessId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Category {
  id                 String               @id @default(uuid())
  name               String               @unique
  businessCount      Int                  @default(0)
  CategoryToBusiness CategoryToBusiness[]
}

model CategoryToBusiness {
  categoryName String
  businessId   String
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])

  @@unique([businessId, categoryId])
}

model Photo {
  id         String   @id @default(uuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  caption    String   @db.VarChar(256)
  label      String   @db.VarChar(10)
}
